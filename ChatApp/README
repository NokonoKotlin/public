 README
 
 
 開発上の注意{
    paizacloudのサーバーに接続できなくなったとき(Connection closed)は
    ブラウザを強制終了して、再度接続する。
    
    外部からアップロードしたファイルは書き換えができないので、アップロードの際は
    新たにファイルを作って、そこのコピペする
    
    サーバーを立てたままターミナルを閉じてしまった場合、
        まずpsコマンドで動いているプロセスを確認
        ps -a コマンドで立っているサーバーのPIDの番号を確認して(ここに表示されなかったら ps auxで全てのプロセスを表示(間違えて他のを消さないように注意))、
        sudo kill 番号　する
        
        
    
    gunicorn server:app -c config/settings.py　コマンドでサーバーを立てる
    serverはアプリ名。config/settings.pyは設定ファイル
    サーバーを落とすときは pkill -f gunicorn コマンド

    


 }
 
 
 全体概要：アプリ概要{
    
    部屋毎にリアルタイムチャットを行います。
    
    socket-ioで通信をしているので、Flask(サーバー) , Javascript(クライアント) ともに、データを受け取る窓口が必要です。
    socket io の仕組みが正直よくわかっていません。
    emitでデータを送信するのですが、外部(サーバーに接続されていないクライアントなど)
    から勝手に送信されたりしないのか
    また、もしも外部から勝手に接続されるようであれば、
    クライアントが接続されるたびにランダムなIDを生成し、
    emitの送信先の名前にIDをくっつけるという解決策を検討しています
    
    
    
    サーバーは一つしかないので、窓口名はなんでもいいのですが,
    クライアントは、各々参加しているルームが違うので、窓口名に参加中のルームをつけておかないといけません
    Ex . 'update_ChatArea-' + ChatRoomName_now 　や  'catch_error_when_send_request-' + ChatRoomName_now
    クライアントの窓口を統一してしまうと、関係ないルームのチャットも表示されてしまいます。
    
   
    
    
    
    データベースのデータは一定量を超えると自動で削除します
    
    
    
    
    送信メッセージにはMessageGlobalIDというIDが全テーブル共通で設定されており、グローバル変数として宣言します
    MessageGlobalIDはサーバー起動時に全てのテーブルを調べて、そのうち最大値とします。
    新たなメッセージが送信されるたびにインクリメントします。
    
    AdminのメッセージはID:-1とします
    
    
    
    開業が多すぎるメッセージは受け取らない
    
    
    ログが貯まると重いので、サーバーのログは同階層のlog.txtに流してます
    
    スパム対策のため、直前に自分が送信した文章と同じ文章(または編集距離が近い文章)は送信できません
    
    クライアント-サーバーで通信するときは、データの形式はjsonを使います。
    通信するjsonデータは概ね以下の通りです。
    {
    `   クライアントのデータ    
        サーバーと通信するときも、これを使ってデータを送信する
        随時更新する. 他にも追加したりするかもです
        
        ChatRoomName : クライアントの参加している部屋名
        message_text : 送信するメッセージ(送信時のみ参照) 。また、直近に送信した自分のメッセージとして保管する
        LatestMessageTimeStamp : クライアントのチャット欄に表示されている最新のメッセージのタイムスタンプ
        ClientLongitude : クライアントの現在地の経度
        ClientLatitude : クライアントの現在地の緯度
        
    }
    
    
    なので、関数の引数も基本的にjsonデータです。
    一つしかなくてもjsonデータです！！
    
    
    また、現在位置の位置情報をサーバーに投げるが、最初の位置情報取得などでは
    位置情報がうまく取得できないことがあるので、
    位置情報を-1で初期化し、-1ならサーバーに投げずに待機させる
    
    
    プログラムには円滑化や安全のためいくつかの規約を設け、
    それらに違反した動作が行われた際は、適切に処理をする必要がある。
    
    
    
    
    規約のいくつかは、サーバー内、またはクライアントで処理されるが、
    特に、サーバーで処理され、ユーザビリティに影響するものはクライアントの
    { catch_error_when_send_request-' + Client_json_data.ChatRoomName } 
    という名のエラー窓口にエラーコードと共に投げられる。
    以下、エラーコードの一覧
        エラー０ : メッセージのフォーマットの問題
        エラー１：チャットルーム使用中にユーザーの参加権限がなくなった場合
        エラー２：参加権限がない状態で発言しようとした場合
        エラー３ : サーバーの負荷が大きい場合
        
        エラーとはサーバーのプログラム的なエラーではなく、アプリで定められた制約に違反している場合を指す
        
        
        
        
        
    
    
    
    
    メッセージはsocket通信でクライアント->サーバー -> クライアント全体の流れで送信されます。
    メッセージが受理可能かどうかは主にサーバー側で判断され、受理されたらデータベースに入れてからクライアント全体に送信します。
    メッセージの表示に関する処理はクライアントで行います。
    また、新たにチャットルームに入った場合、これまでのやり取りを全てサーバーから受け取ります。
    どのメッセージが最新のものかは、Client_json_dataの、表示されている最新のメッセージのタイムスタンプで判別します。
    
    メッセージには隠しコマンドもあり、コマンドを読み取ったら随時処理します。
    (ex. NokonoKotlin: で始まるメッセージの場合、usertypeをサクラ(3)にします)
    (ex. Color-x: (xは0~9の整数)　で始まるメッセージには、色をつけて表示する: 0 -> 黒 , 1 -> 赤 , 2 -> 青 , 3-> ピンク)
    
    
    隠しコマンドはメッセージオプションという形でユーザーに見える形で実装するが、メッセージオプションに表示されない、本当の隠しコマンドも実装するかも
    
    
 }
 
 
 
 
 
 
 
 
 
 
 
 
 チャットルームについて{
    
    名古屋大学の周辺で
    
    地点 A(35.15369069670362, 136.96021445133778)
    地点 B(35.15860518690398, 136.9623781894616)
    地点 C(35.15079442213633, 136.96863577221325)
    に対して、
    ベクトル AB , AC を軸にした平行四辺形を等分に区分けして、名古屋大学内にあるような領域をチャットルームにする
    ただし、何等分するかは未定
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 サーバーへのリクエスト制限について{

    IntervalCounterLimit 秒からなるインターバル(期間)ごとにアクセス制限するかどうかを判定する.
    インターバル中にリクエスト数が AllowedRequestMax を超えた場合、そのインターバル中はリクエストを制限する
    インターバルが終了した時、各変数を初期化し、新たなインターバルを始める
    
    
    サーバーへのアクセスによって関数が呼び出されるたびにisRequestLimitedを呼び出してリクエストを制限するか判定する
    ただし、プログラムの性質上、リクエストがされてもアクセス制限にかけないものもある(ex.定期的に呼び出される、チャットルームの権限を確認するリクエストなど)
    
     
    IntervalCounterLimit秒ごとにリクエスト状況(リクエスト数)を確認し、混雑と判断した場合、リクエストを禁止する(さらに次からは再開)
    const IntervalCounterLimit 
    
    現在のインターバルの開始時間
    IntervalStartTime 
    
    このインターバル中のリクエスト数
    RequestsNum_WhileInterval 
    
    １回のインターバル中に通すリクエスト数の上限
    const AllowedRequestMax 


    
 }
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 index(トップページ)掲載サイトのカテゴリについて{
    カテゴリ分け対象のdiv要素のnameには数値が割り振られている
    また、各カテゴリには素数が割り振られている
    
    例えば、娯楽->a , 仕事->b , 学問->c とする。この時、{学問、仕事}というカテゴリに当てはまる要素のnameの数値は、b*cの倍数である
    言い換えると、ある要素 x に カテゴリ k が含まれる <-> xのnameをkに割り振られた素数で割った余りが0.
    
    
    オススメwebサイトのカテゴリ番号:  
        { 2 : 学業 , 3 : 勉強 , 5 : エンターテイメント , 7 : 便利 , 11 : SNS , 13 : 公式 , 17 : 生活 }とする
    
    
    
    オススメ活動場所のカテゴリ番号:  
        { 2 : 学業 , 3 : 大学内 , 5 : 飲食 , 7 : 暇つぶし , 11 : エンターテイメント , 13 : 生活-スーパー-コンビニ , 17 : ショッピング , 19 : 施設 , 23 : 運動 }とする
        
    
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 flask(サーバーサイド){
    コード規約:
        関数名のつなぎ目は '_' とします。
        変数のつなぎ目は大文字で区別します。
        データのやり取りは全てjsonデータとする(もちろん、関数の引数もjson)
        Payload.max_decode_packets = 50しないとエラーが出るよ
        
    
    ログが貯まると重くなるので、
        import logging 
        l = logging.getLogger()
        l.addHandler(logging.FileHandler("./log.txt"))
        でlog.txtというファイルに流す
        
    
    コード説明    
        サーバーで動かす用のプログラム
        サーバーで動かすため、グローバル変数は全ユーザー(ブラウザ)共通となる
        よって、ユーザー毎に設定しなければならない変数は、関数内で随時宣言する
        
        
    また、ユーザーにはいくつかのパラメータがあり、以下に記す
        UserType : ユーザーのチャットルーム内での権限
            0 -> 一般書き込みユーザー
            1 -> admin (開発担当者)
            2 -> 閲覧専用ユーザー
            3 -> サクラ(演者)
        
        IPAddress : ユーザーの識別 、 悪質な攻撃を弾くために使う
            
        
        
    その他、グローバル変数は以下の通り
        
        
            
    Connection : データベース 
    Cursor : データベース操作
    
    
    databaseをいじる前はconnect、いじった後はcloseする(あれ、もしかしたらcloseしなくていいかも)!
    
    
    @socketio.on(send_message(Client_json_data) ): 
        javascriptで、メッセージを送信してきたら発動. データベースにメッセージを入れる
        Client_json_dataはクライアント側のデータが入っている
    
    
    
    
    
    
    @socketio.on(update_ChatArea(Client_json_data)) :  

        クライアントがページを開いたら発動。
        これまでのチャット履歴を取ってくる
        クライアント(HTML)のチャット欄を更新するとき、
            {'update_ChatArea-' + チャットルーム名 }という窓口にメッセージ関連のjsonデータを送信する
        
    
            
            
    
            
            
    @socketio.on(reload_Client_ChatRoom(Client_json_data)):
        javascript(クライアント)から定期的にアクセスされる。
        Client_json_dataにはクライアントが今現在参加している部屋名が入っている
        
        クライアントが、現在の部屋の参加権限があるかを判定し、なければトップページにリダイレクトする
        
    
    
    
    
    @socketio.on(send_FootPrints_for_database()):
        クライアントから受け取った
    
    
    
    
    
    
    @socketio.on('reload_Client_ChatRoomCandidateList'):
        indexページの、参加可能な部屋リストを更新
        
            
            
    route-index() : トップページへのルーティング
    
    
    
    @app.route("/ChatRoom/<RoomNameRequeest> , 'GET') 
        : チャットルームへのルーティング。
        index.htmlのjavascriptでここにリダイレクトする
            
    
}
        
        
        
        
        
        
 
 
  
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
MySQL:データベース{

    reset_database.pyで初期化
    
    データベース名はDataBaseMain
    
    ChatRoomListにあるRoomNameの集合と,チャットルームのメッセージを入れるテーブル名の集合は完全に一致している必要がある
    
    テーブルたち：
        ChatRoomList : チャットルームの情報たち
            Longitude : 経度
            Latitude : 緯度
            RoomName : チャットルームのテーブル名(PRIMARY KEY)
            RoomName_JP : チャットルームのテーブル名(日本語名)
            Radius　: チャットルームの中心からの半径 
            FootPrintsNum : 足跡を記録
            RoomExplanation : その部屋の説明
            LatestMessageTimeStamp : そのチャットルーム内の最新のメッセージの送信時間(多分これ使わない)
        
            
        TOKYO : デバッグ用です。
            その他のチャットルームも全て以下の形式で、
            メッセージの情報を管理
            IPAddress : IPアドレス
            message : メッセージの内容
            timestamp : そのメッセージの送信時間(少数型)
            usertype : 送信者のルーム内の権限 
                0 -> 一般(自分以外(吹き出しが左側))
                1 -> admin
                2 -> 自分(吹き出しが右側)
                3 -> サクラ             
            
            date : 日付と時間
            MessageGlobalID : 全テーブル共通のメッセージのID
            Likes : メッセージに対するいいね数
            
} 









 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
HTML-Javascript(クライアント-チャットルーム){
    HTMLにflaskから渡す変数もあるが、基本はsocket通信でjavascriptに変数を送って、
    javasscriptからHTMLを編集することもある。
    
    スマホ版だと基本的に画面全体がチャットエリアで、送信ボタンやメニューバーを上下に設置


    やること
    
        メッセージの送受信
        足跡の送信
        エラーの受け取り
        メッセージの表示
        クライアントの権限などの情報を更新するため、サーバーに定期的にアクセス
        メッセージに対するLikeの送信
        
    

    Javascript : 
        ChatRoomName_now : 現在参加中のチャット部屋。flaskでルーティングされた時に受け取る
        timestamp_now : HTMLで表示中の最新メッセージのタイムスタンプ
    
    
    
        send_message(): 
            HTMLの入力フォームからFlask(サーバー)にメッセージを送信
        
        send_FootPrints():
            足跡の送信
        
        send_Like(event):
            メッセージに対するLikeの送信
            ボタンタグのidが、サーバーにおけるメッセージのグローバルIDと一致
            
        
        get_ChatData_from_server():
            setIntervalで定期的にサーバーにアクセスして、メッセージを更新する
        
        
        
        
        socket.emit('return_updated_data' ,  Client_data_json.ChatRoomName.LatestMessageTimeStamp  ) : 
            サーバーの'return_update_data' にアクセスして、最新の情報を送ってもらう
            Client_data_json.LatestMessageTimeStamp よりも新しいメッセージのみを要求する
            
            
            
        socket.on('update_ChatArea-' + Client_data_json.ChatRoomName ):
            ChatRoomName_nowに対応した窓口、更新データ(json)をサーバーから受け取る窓口
            +ChatRoomName_now　がなかったら関係ないルームのメッセージも表示してしまうので必須
            
            チャットエリアにメッセージの吹き出しを追加したり、Likeボタン(兼改行)を追加したりする
            
            
            
        socket.on('catch_error_when_send_request-' + Client_data_json.ChatRoomName ):
            チャットルーム利用中にエラーが発生した時用のエラー窓口
            エラーとはサーバーのプログラム的なエラーではなく、アプリで定められた制約(README)に違反している場合を指す
            
            error_code = 0 : メッセージのフォーマットの問題
            error_code = 1 : 部屋の参加権限がなくなった場合 
            error_code = 2 : 部屋の参加権限もとからない場合
            error_code = 3 : サーバーの負荷が大きい場合
            
    
            
            
            
            
}   







 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



HTML-Javascript(クライアント-トップ(index){
    

    定期的に参加可能な部屋リストを更新する。
    クライアントデータをjsonでもつ(他と同じ)
    
    /*
        サーバーにこのページの情報を問い合わせ
    */
    function update_page_info(){
        emit('reload_Client_ChatRoomCandidateList' , Client_json_data)
    }
    
    
    
    
    /*
        サーバーから参加可能ルームの一覧をjsonで受け取り、反映させる
    */
    socket.on('get_ChatRoomCandidate' )
        


    /*
        サイト訪問時にサーバーからオススメ名大関連webサイトのデータをリスト(受け取る時はjsonデータ)で受け取り、HTMLタグに変換して表示する    
    */
    socket.on('get_WebSiteRecommendation'  , function(json_data)


    
    /*
        サイト訪問時にサーバーから名大生のオススメ遊び場のデータをリスト(受け取るときはjsonデータ)で受け取り、HTMLタグに変換して表示する    
    */
    socket.on('get_PlayGroundRecommendation'  , function(json_data)




    function init_HTML(RequestNeeded){
        サイト訪問時や画面サイズ変更時にHTML要素の配置を行う
        サーバーにリクエストを送り、ページに表示する情報をとってきたりもする
        ただし引数のboolがfalseの時、サーバーへのリクエストは行わず、HTMLの配置の初期化だけを行う
    }




}









            